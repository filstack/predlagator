
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  passwordHash: 'passwordHash',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.ChannelScalarFieldEnum = {
  id: 'id',
  username: 'username',
  category: 'category',
  tgstatUrl: 'tgstatUrl',
  collectedAt: 'collectedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title',
  description: 'description',
  memberCount: 'memberCount',
  isVerified: 'isVerified',
  lastChecked: 'lastChecked',
  isActive: 'isActive',
  errorCount: 'errorCount',
  lastError: 'lastError'
};

exports.Prisma.BatchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  channelCount: 'channelCount'
};

exports.Prisma.TemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  content: 'content',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  mediaType: 'mediaType',
  mediaUrl: 'mediaUrl',
  usageCount: 'usageCount'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  batchId: 'batchId',
  templateId: 'templateId',
  params: 'params',
  mode: 'mode',
  deliveryRate: 'deliveryRate',
  retryLimit: 'retryLimit',
  status: 'status',
  progress: 'progress',
  totalJobs: 'totalJobs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  createdById: 'createdById'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  channelId: 'channelId',
  bullJobId: 'bullJobId',
  status: 'status',
  attempts: 'attempts',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  startedAt: 'startedAt',
  sentAt: 'sentAt',
  failedAt: 'failedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  metadata: 'metadata',
  severity: 'severity',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  OPERATOR: 'OPERATOR',
  AUDITOR: 'AUDITOR'
};

exports.MediaType = exports.$Enums.MediaType = {
  PHOTO: 'PHOTO',
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT'
};

exports.CampaignMode = exports.$Enums.CampaignMode = {
  TEST: 'TEST',
  LIVE: 'LIVE'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  QUEUED: 'QUEUED',
  RUNNING: 'RUNNING',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  QUEUED: 'QUEUED',
  SENDING: 'SENDING',
  SENT: 'SENT',
  FAILED: 'FAILED'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  USER_LOGIN: 'USER_LOGIN',
  USER_LOGOUT: 'USER_LOGOUT',
  USER_LOGIN_FAILED: 'USER_LOGIN_FAILED',
  PERMISSION_DENIED: 'PERMISSION_DENIED',
  CAMPAIGN_CREATED: 'CAMPAIGN_CREATED',
  CAMPAIGN_STARTED: 'CAMPAIGN_STARTED',
  CAMPAIGN_PAUSED: 'CAMPAIGN_PAUSED',
  CAMPAIGN_RESUMED: 'CAMPAIGN_RESUMED',
  CAMPAIGN_CANCELLED: 'CAMPAIGN_CANCELLED',
  BATCH_CREATED: 'BATCH_CREATED',
  BATCH_UPDATED: 'BATCH_UPDATED',
  BATCH_DELETED: 'BATCH_DELETED',
  CHANNEL_IMPORTED: 'CHANNEL_IMPORTED',
  CHANNEL_DEACTIVATED: 'CHANNEL_DEACTIVATED',
  SESSION_STRING_ADDED: 'SESSION_STRING_ADDED',
  SESSION_STRING_ROTATED: 'SESSION_STRING_ROTATED',
  FLOOD_WAIT_TRIGGERED: 'FLOOD_WAIT_TRIGGERED',
  ACCOUNT_BANNED: 'ACCOUNT_BANNED',
  WORKER_STARTED: 'WORKER_STARTED',
  WORKER_STOPPED: 'WORKER_STOPPED',
  DATABASE_MIGRATION: 'DATABASE_MIGRATION'
};

exports.LogSeverity = exports.$Enums.LogSeverity = {
  DEBUG: 'DEBUG',
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  CRITICAL: 'CRITICAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  Channel: 'Channel',
  Batch: 'Batch',
  Template: 'Template',
  Campaign: 'Campaign',
  Job: 'Job',
  AuditLog: 'AuditLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\00_dev\\01_Ведомости\\Новая папка\\бот_рассылка\\shared\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\00_dev\\01_Ведомости\\Новая папка\\бот_рассылка\\shared\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": null,
        "value": "file:./dev.db"
      }
    }
  },
  "inlineSchema": "// shared/prisma/schema.prisma\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\n// ============================================================================\n// USERS & AUTHENTICATION\n// ============================================================================\n\nmodel User {\n  id           String    @id @default(cuid())\n  username     String    @unique\n  passwordHash String\n  role         UserRole  @default(OPERATOR)\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n  lastLoginAt  DateTime?\n\n  createdBatches   Batch[]    @relation(\"BatchCreator\")\n  createdCampaigns Campaign[] @relation(\"CampaignCreator\")\n  auditLogs        AuditLog[] @relation(\"UserAuditLogs\")\n\n  @@index([username])\n  @@map(\"users\")\n}\n\nenum UserRole {\n  ADMIN\n  OPERATOR\n  AUDITOR\n}\n\n// ============================================================================\n// CHANNEL CATALOG\n// ============================================================================\n\nmodel Channel {\n  id          String   @id @default(cuid())\n  username    String   @unique\n  category    String\n  tgstatUrl   String?\n  collectedAt DateTime\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  title       String?\n  description String?\n  memberCount Int?\n  isVerified  Boolean   @default(false)\n  lastChecked DateTime?\n\n  isActive   Boolean @default(true)\n  errorCount Int     @default(0)\n  lastError  String?\n\n  batches Batch[] @relation(\"BatchChannels\")\n  jobs    Job[]   @relation(\"JobChannel\")\n\n  @@index([category])\n  @@index([username])\n  @@index([isActive])\n  @@map(\"channels\")\n}\n\n// ============================================================================\n// BATCH MANAGEMENT\n// ============================================================================\n\nmodel Batch {\n  id           String   @id @default(cuid())\n  name         String\n  description  String?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n  createdById  String\n  channelCount Int      @default(0)\n\n  channels  Channel[]  @relation(\"BatchChannels\")\n  createdBy User       @relation(\"BatchCreator\", fields: [createdById], references: [id])\n  campaigns Campaign[] @relation(\"CampaignBatch\")\n\n  @@index([createdById])\n  @@index([createdAt])\n  @@map(\"batches\")\n}\n\n// ============================================================================\n// MESSAGE TEMPLATES\n// ============================================================================\n\nmodel Template {\n  id          String   @id @default(cuid())\n  name        String\n  content     String\n  description String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  mediaType  MediaType?\n  mediaUrl   String?\n  usageCount Int        @default(0)\n\n  campaigns Campaign[] @relation(\"CampaignTemplate\")\n\n  @@index([name])\n  @@map(\"templates\")\n}\n\nenum MediaType {\n  PHOTO\n  VIDEO\n  DOCUMENT\n}\n\n// ============================================================================\n// CAMPAIGNS & JOBS\n// ============================================================================\n\nmodel Campaign {\n  id          String  @id @default(cuid())\n  name        String\n  description String?\n\n  batchId    String\n  templateId String\n  params     Json\n\n  mode         CampaignMode @default(TEST)\n  deliveryRate Int          @default(20)\n  retryLimit   Int          @default(3)\n\n  status    CampaignStatus @default(QUEUED)\n  progress  Int            @default(0)\n  totalJobs Int            @default(0)\n\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  startedAt   DateTime?\n  completedAt DateTime?\n  createdById String\n\n  batch     Batch    @relation(\"CampaignBatch\", fields: [batchId], references: [id])\n  template  Template @relation(\"CampaignTemplate\", fields: [templateId], references: [id])\n  createdBy User     @relation(\"CampaignCreator\", fields: [createdById], references: [id])\n  jobs      Job[]    @relation(\"CampaignJobs\")\n\n  @@index([status])\n  @@index([batchId])\n  @@index([createdById])\n  @@index([createdAt])\n  @@map(\"campaigns\")\n}\n\nenum CampaignMode {\n  TEST\n  LIVE\n}\n\nenum CampaignStatus {\n  QUEUED\n  RUNNING\n  PAUSED\n  COMPLETED\n  FAILED\n  CANCELLED\n}\n\nmodel Job {\n  id         String @id @default(cuid())\n  campaignId String\n  channelId  String\n\n  bullJobId String? @unique\n\n  status       JobStatus @default(QUEUED)\n  attempts     Int       @default(0)\n  errorMessage String?\n\n  createdAt DateTime  @default(now())\n  startedAt DateTime?\n  sentAt    DateTime?\n  failedAt  DateTime?\n\n  campaign Campaign @relation(\"CampaignJobs\", fields: [campaignId], references: [id], onDelete: Cascade)\n  channel  Channel  @relation(\"JobChannel\", fields: [channelId], references: [id])\n\n  @@index([campaignId, status])\n  @@index([channelId])\n  @@index([status])\n  @@map(\"jobs\")\n}\n\nenum JobStatus {\n  QUEUED\n  SENDING\n  SENT\n  FAILED\n}\n\n// ============================================================================\n// AUDIT LOGGING\n// ============================================================================\n\nmodel AuditLog {\n  id           String      @id @default(cuid())\n  userId       String?\n  action       AuditAction\n  resourceType String?\n  resourceId   String?\n  metadata     Json?\n  severity     LogSeverity @default(INFO)\n  timestamp    DateTime    @default(now())\n  ipAddress    String?\n\n  user User? @relation(\"UserAuditLogs\", fields: [userId], references: [id])\n\n  @@index([userId])\n  @@index([action])\n  @@index([timestamp])\n  @@index([severity])\n  @@map(\"audit_logs\")\n}\n\nenum AuditAction {\n  USER_LOGIN\n  USER_LOGOUT\n  USER_LOGIN_FAILED\n  PERMISSION_DENIED\n  CAMPAIGN_CREATED\n  CAMPAIGN_STARTED\n  CAMPAIGN_PAUSED\n  CAMPAIGN_RESUMED\n  CAMPAIGN_CANCELLED\n  BATCH_CREATED\n  BATCH_UPDATED\n  BATCH_DELETED\n  CHANNEL_IMPORTED\n  CHANNEL_DEACTIVATED\n  SESSION_STRING_ADDED\n  SESSION_STRING_ROTATED\n  FLOOD_WAIT_TRIGGERED\n  ACCOUNT_BANNED\n  WORKER_STARTED\n  WORKER_STOPPED\n  DATABASE_MIGRATION\n}\n\nenum LogSeverity {\n  DEBUG\n  INFO\n  WARNING\n  ERROR\n  CRITICAL\n}\n",
  "inlineSchemaHash": "eaeae0668556c17a196c18b824e72221abe541930d77524cc07ada18b9dbb9ad",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdBatches\",\"kind\":\"object\",\"type\":\"Batch\",\"relationName\":\"BatchCreator\"},{\"name\":\"createdCampaigns\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignCreator\"},{\"name\":\"auditLogs\",\"kind\":\"object\",\"type\":\"AuditLog\",\"relationName\":\"UserAuditLogs\"}],\"dbName\":\"users\"},\"Channel\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tgstatUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"collectedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"memberCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastChecked\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"errorCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastError\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"batches\",\"kind\":\"object\",\"type\":\"Batch\",\"relationName\":\"BatchChannels\"},{\"name\":\"jobs\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobChannel\"}],\"dbName\":\"channels\"},\"Batch\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"channelCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"channels\",\"kind\":\"object\",\"type\":\"Channel\",\"relationName\":\"BatchChannels\"},{\"name\":\"createdBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BatchCreator\"},{\"name\":\"campaigns\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignBatch\"}],\"dbName\":\"batches\"},\"Template\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"mediaType\",\"kind\":\"enum\",\"type\":\"MediaType\"},{\"name\":\"mediaUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"usageCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"campaigns\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignTemplate\"}],\"dbName\":\"templates\"},\"Campaign\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"batchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"templateId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"params\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"mode\",\"kind\":\"enum\",\"type\":\"CampaignMode\"},{\"name\":\"deliveryRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"retryLimit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"CampaignStatus\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalJobs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdById\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"batch\",\"kind\":\"object\",\"type\":\"Batch\",\"relationName\":\"CampaignBatch\"},{\"name\":\"template\",\"kind\":\"object\",\"type\":\"Template\",\"relationName\":\"CampaignTemplate\"},{\"name\":\"createdBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CampaignCreator\"},{\"name\":\"jobs\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"CampaignJobs\"}],\"dbName\":\"campaigns\"},\"Job\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"campaignId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"channelId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bullJobId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"JobStatus\"},{\"name\":\"attempts\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"failedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"campaign\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignJobs\"},{\"name\":\"channel\",\"kind\":\"object\",\"type\":\"Channel\",\"relationName\":\"JobChannel\"}],\"dbName\":\"jobs\"},\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"enum\",\"type\":\"AuditAction\"},{\"name\":\"resourceType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resourceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"severity\",\"kind\":\"enum\",\"type\":\"LogSeverity\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserAuditLogs\"}],\"dbName\":\"audit_logs\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {}
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

