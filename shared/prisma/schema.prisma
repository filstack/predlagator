// shared/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// USERS & AUTHENTICATION
// ============================================================================

model User {
  id           String      @id @default(cuid())
  username     String      @unique
  passwordHash String
  role         UserRole    @default(OPERATOR)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  lastLoginAt  DateTime?

  createdBatches   Batch[]     @relation("BatchCreator")
  createdCampaigns Campaign[]  @relation("CampaignCreator")
  auditLogs        AuditLog[]  @relation("UserAuditLogs")

  @@index([username])
  @@map("users")
}

enum UserRole {
  ADMIN
  OPERATOR
  AUDITOR
}

// ============================================================================
// CHANNEL CATALOG
// ============================================================================

model Channel {
  id          String    @id @default(cuid())
  username    String    @unique
  category    String
  tgstatUrl   String?
  collectedAt DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  title       String?
  description String?
  memberCount Int?
  isVerified  Boolean   @default(false)
  lastChecked DateTime?

  isActive    Boolean   @default(true)
  errorCount  Int       @default(0)
  lastError   String?

  batches     Batch[]   @relation("BatchChannels")
  jobs        Job[]     @relation("JobChannel")

  @@index([category])
  @@index([username])
  @@index([isActive])
  @@map("channels")
}

// ============================================================================
// BATCH MANAGEMENT
// ============================================================================

model Batch {
  id           String     @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdById  String
  channelCount Int        @default(0)

  channels     Channel[]  @relation("BatchChannels")
  createdBy    User       @relation("BatchCreator", fields: [createdById], references: [id])
  campaigns    Campaign[] @relation("CampaignBatch")

  @@index([createdById])
  @@index([createdAt])
  @@map("batches")
}

// ============================================================================
// MESSAGE TEMPLATES
// ============================================================================

model Template {
  id          String     @id @default(cuid())
  name        String
  content     String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  mediaType   MediaType?
  mediaUrl    String?
  usageCount  Int        @default(0)

  campaigns   Campaign[] @relation("CampaignTemplate")

  @@index([name])
  @@map("templates")
}

enum MediaType {
  PHOTO
  VIDEO
  DOCUMENT
}

// ============================================================================
// CAMPAIGNS & JOBS
// ============================================================================

model Campaign {
  id           String         @id @default(cuid())
  name         String
  description  String?

  batchId      String
  templateId   String
  params       Json

  mode         CampaignMode   @default(TEST)
  deliveryRate Int            @default(20)
  retryLimit   Int            @default(3)

  status       CampaignStatus @default(QUEUED)
  progress     Int            @default(0)
  totalJobs    Int            @default(0)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  startedAt    DateTime?
  completedAt  DateTime?
  createdById  String

  batch        Batch          @relation("CampaignBatch", fields: [batchId], references: [id])
  template     Template       @relation("CampaignTemplate", fields: [templateId], references: [id])
  createdBy    User           @relation("CampaignCreator", fields: [createdById], references: [id])
  jobs         Job[]          @relation("CampaignJobs")

  @@index([status])
  @@index([batchId])
  @@index([createdById])
  @@index([createdAt])
  @@map("campaigns")
}

enum CampaignMode {
  TEST
  LIVE
}

enum CampaignStatus {
  QUEUED
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

model Job {
  id           String     @id @default(cuid())
  campaignId   String
  channelId    String

  bullJobId    String?    @unique

  status       JobStatus  @default(QUEUED)
  attempts     Int        @default(0)
  errorMessage String?

  createdAt    DateTime   @default(now())
  startedAt    DateTime?
  sentAt       DateTime?
  failedAt     DateTime?

  campaign     Campaign   @relation("CampaignJobs", fields: [campaignId], references: [id], onDelete: Cascade)
  channel      Channel    @relation("JobChannel", fields: [channelId], references: [id])

  @@index([campaignId, status])
  @@index([channelId])
  @@index([status])
  @@map("jobs")
}

enum JobStatus {
  QUEUED
  SENDING
  SENT
  FAILED
}

// ============================================================================
// AUDIT LOGGING
// ============================================================================

model AuditLog {
  id           String       @id @default(cuid())
  userId       String?
  action       AuditAction
  resourceType String?
  resourceId   String?
  metadata     Json?
  severity     LogSeverity  @default(INFO)
  timestamp    DateTime     @default(now())
  ipAddress    String?

  user         User?        @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([severity])
  @@map("audit_logs")
}

enum AuditAction {
  USER_LOGIN
  USER_LOGOUT
  USER_LOGIN_FAILED
  PERMISSION_DENIED
  CAMPAIGN_CREATED
  CAMPAIGN_STARTED
  CAMPAIGN_PAUSED
  CAMPAIGN_RESUMED
  CAMPAIGN_CANCELLED
  BATCH_CREATED
  BATCH_UPDATED
  BATCH_DELETED
  CHANNEL_IMPORTED
  CHANNEL_DEACTIVATED
  SESSION_STRING_ADDED
  SESSION_STRING_ROTATED
  FLOOD_WAIT_TRIGGERED
  ACCOUNT_BANNED
  WORKER_STARTED
  WORKER_STOPPED
  DATABASE_MIGRATION
}

enum LogSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}
