/**
 * –¢–µ—Å—Ç RLS - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Row Level Security
 * Usage: npx tsx backend/scripts/test-rls.ts
 */

import 'dotenv/config';
import { createAnonClient, createUserClient, getSupabase } from '../src/lib/supabase';

async function testRLS() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Row Level Security (RLS)\n');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  // 1. –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç: –ß—Ç–µ–Ω–∏–µ channels –ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º: 0 –∑–∞–ø–∏—Å–µ–π)\n');

  const anonClient = createAnonClient();

  const { data: channelsNoAuth, error: channelsNoAuthError } = await anonClient
    .from('channels')
    .select('id, username')
    .limit(10);

  if (channelsNoAuthError) {
    console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${channelsNoAuthError.message}`);
  } else {
    if (channelsNoAuth && channelsNoAuth.length === 0) {
      console.log('‚úÖ RLS —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–µ–∑ auth –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã.');
    } else {
      console.log(`‚ùå RLS –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ü–æ–ª—É—á–µ–Ω–æ ${channelsNoAuth?.length || 0} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.`);
      console.log('   ‚Üí –ù—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å RLS: ALTER TABLE channels ENABLE ROW LEVEL SECURITY;\n');
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ä–æ–ª—å (–¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ)
  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç: –ß—Ç–µ–Ω–∏–µ channels —á–µ—Ä–µ–∑ service_role (–æ–∂–∏–¥–∞–µ–º: –≤—Å–µ –∑–∞–ø–∏—Å–∏)\n');

  const serviceClient = getSupabase();
  const { data: channelsService, error: channelsServiceError } = await serviceClient
    .from('channels')
    .select('id, username, user_id')
    .limit(5);

  if (channelsServiceError) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${channelsServiceError.message}`);
  } else {
    console.log(`‚úÖ Service role –≤–∏–¥–∏—Ç ${channelsService?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    if (channelsService && channelsService.length > 0) {
      console.log(`   –ü—Ä–∏–º–µ—Ä: ${channelsService[0].username} (user_id: ${channelsService[0].user_id || 'NULL'})`);
    }
  }

  // 3. –õ–æ–≥–∏–Ω –∫–∞–∫ admin –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç: –õ–æ–≥–∏–Ω –∫–∞–∫ admin –∏ —á—Ç–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n');

  const { data: loginData, error: loginError } = await anonClient.auth.signInWithPassword({
    email: 'admin@predlagator.com',
    password: 'SecurePassword123!'
  });

  if (loginError) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${loginError.message}`);
    console.log('   ‚Üí –í–æ–∑–º–æ–∂–Ω–æ admin –Ω–µ —Å–æ–∑–¥–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx tsx backend/scripts/setup-admin.ts\n');
  } else {
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${loginData.user?.email} (${loginData.user?.id})`);

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å user –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    const userClient = createUserClient(loginData.session!.access_token);

    // –ß–∏—Ç–∞–µ–º channels –∫–∞–∫ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const { data: channelsUser, error: channelsUserError } = await userClient
      .from('channels')
      .select('id, username, user_id')
      .limit(5);

    if (channelsUserError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${channelsUserError.message}`);
    } else {
      console.log(`‚úÖ Admin –≤–∏–¥–∏—Ç ${channelsUser?.length || 0} —Å–≤–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ –ª–∏ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const allBelongToUser = channelsUser?.every(c => c.user_id === loginData.user!.id);

      if (allBelongToUser) {
        console.log('‚úÖ RLS —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      } else {
        const foreignChannels = channelsUser?.filter(c => c.user_id !== loginData.user!.id);
        console.log(`‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —á—É–∂–∏–µ –∫–∞–Ω–∞–ª—ã: ${foreignChannels?.length || 0}`);
      }
    }

    // –í—ã—Ö–æ–¥
    await userClient.auth.signOut();
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ users table
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users\n');

  const { data: usersData, error: usersError } = await serviceClient
    .from('users')
    .select('id, username, role')
    .limit(3);

  if (usersError) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${usersError.message}`);
  } else {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersData?.length || 0}`);
    usersData?.forEach(user => {
      console.log(`   - ${user.username || 'no username'} (${user.role}) - ID: ${user.id}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ ID - —ç—Ç–æ UUID
      const isUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(user.id);
      if (!isUUID) {
        console.log(`      ‚ö†Ô∏è  ID –Ω–µ UUID —Ñ–æ—Ä–º–∞—Ç! –ù—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è 003_000_create_users_table.sql`);
      }
    });
  }

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram_accounts —Å RLS
  console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç: telegram_accounts —Å RLS\n');

  const { data: telegramNoAuth, error: telegramNoAuthError } = await anonClient
    .from('telegram_accounts')
    .select('id, telegram_phone')
    .limit(10);

  if (telegramNoAuthError) {
    console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${telegramNoAuthError.message}`);
  } else {
    if (telegramNoAuth && telegramNoAuth.length === 0) {
      console.log('‚úÖ RLS –Ω–∞ telegram_accounts —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } else {
      console.log(`‚ùå RLS –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ü–æ–ª—É—á–µ–Ω–æ ${telegramNoAuth?.length || 0} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ auth.`);
    }
  }

  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n');
}

testRLS().catch((error) => {
  console.error('\n‚ùå Fatal error:', error);
  process.exit(1);
});
