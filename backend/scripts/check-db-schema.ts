/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Feature 003
 * Usage: npx tsx backend/scripts/check-db-schema.ts
 */

import 'dotenv/config';
import { getSupabase } from '../src/lib/supabase';

async function checkSchema() {
  const supabase = getSupabase();

  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Feature 003\n');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  let allGood = true;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã telegram_accounts
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã telegram_accounts...');
  try {
    const { data, error } = await supabase
      .from('telegram_accounts')
      .select('id, user_id, telegram_phone, telegram_connected')
      .limit(1);

    if (error) {
      if (error.message.includes('does not exist')) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ telegram_accounts –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        console.log('   ‚Üí –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: 003_001_create_telegram_accounts.sql\n');
        allGood = false;
      } else {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${error.message}\n`);
        allGood = false;
      }
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ telegram_accounts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log(`   –ó–∞–ø–∏—Å–µ–π: ${data?.length || 0}\n`);
    }
  } catch (err: any) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${err.message}\n`);
    allGood = false;
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ user_id –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
  console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ user_id...');

  const tables = ['users', 'channels', 'batches', 'templates', 'campaigns', 'jobs'];

  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('id, user_id')
        .limit(1);

      if (error) {
        if (error.message.includes('user_id')) {
          console.log(`‚ùå ${table}: –∫–æ–ª–æ–Ω–∫–∞ user_id –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
          allGood = false;
        } else {
          console.log(`‚ö†Ô∏è  ${table}: ${error.message}`);
        }
      } else {
        console.log(`‚úÖ ${table}: user_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    } catch (err: any) {
      console.log(`‚ùå ${table}: ${err.message}`);
      allGood = false;
    }
  }
  console.log('');

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ telegram_account_id –≤ campaigns
  console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ campaigns ‚Üí telegram_accounts...');
  try {
    const { data, error } = await supabase
      .from('campaigns')
      .select('id, telegram_account_id')
      .limit(1);

    if (error) {
      if (error.message.includes('telegram_account_id')) {
        console.log('‚ùå campaigns: –∫–æ–ª–æ–Ω–∫–∞ telegram_account_id –û–¢–°–£–¢–°–¢–í–£–ï–¢');
        console.log('   ‚Üí –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: 003_002_add_user_id_columns.sql\n');
        allGood = false;
      } else {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${error.message}\n`);
      }
    } else {
      console.log('‚úÖ campaigns.telegram_account_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n');
    }
  } catch (err: any) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${err.message}\n`);
    allGood = false;
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –Ω–∞ users
  console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Row Level Security (RLS)...');
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å users –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ RLS –≤–∫–ª—é—á–µ–Ω)
    const { data, error } = await supabase
      .from('users')
      .select('id')
      .limit(10);

    if (error) {
      console.log(`‚ö†Ô∏è  users: ${error.message}`);
    } else {
      if (data && data.length === 0) {
        console.log('‚úÖ users: RLS –≤–∫–ª—é—á–µ–Ω (–±–µ–∑ auth –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã)');
      } else {
        console.log('‚ö†Ô∏è  users: RLS –≤–æ–∑–º–æ–∂–Ω–æ –ù–ï –≤–∫–ª—é—á–µ–Ω (–ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–µ–∑ auth)');
        console.log(`   –ó–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ: ${data?.length || 0}`);
      }
    }
  } catch (err: any) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS: ${err.message}`);
  }
  console.log('');

  // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  try {
    const { data: users, error } = await supabase.auth.admin.listUsers();

    if (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}\n`);
    } else {
      const adminUser = users.users.find(u => u.email === 'admin@predlagator.com');

      if (adminUser) {
        console.log('‚úÖ Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        console.log(`   Email: ${adminUser.email}`);
        console.log(`   ID: ${adminUser.id}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram account –¥–ª—è admin
        const { data: telegramAccounts } = await supabase
          .from('telegram_accounts')
          .select('*')
          .eq('user_id', adminUser.id);

        if (telegramAccounts && telegramAccounts.length > 0) {
          console.log(`   Telegram accounts: ${telegramAccounts.length}`);
          telegramAccounts.forEach(acc => {
            console.log(`     - ${acc.telegram_phone} (${acc.telegram_connected ? 'connected' : 'not connected'})`);
          });
        } else {
          console.log('   ‚ö†Ô∏è  Telegram account –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }
      } else {
        console.log('‚ùå Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω');
        console.log('   ‚Üí –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx tsx backend/scripts/setup-admin.ts');
      }
    }
  } catch (err: any) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
  }
  console.log('');

  // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  console.log('6Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
  const stats = [
    { table: 'users', name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' },
    { table: 'telegram_accounts', name: 'Telegram –∞–∫–∫–∞—É–Ω—Ç—ã' },
    { table: 'channels', name: '–ö–∞–Ω–∞–ª—ã' },
    { table: 'batches', name: '–ë–∞—Ç—á–∏' },
    { table: 'templates', name: '–®–∞–±–ª–æ–Ω—ã' },
    { table: 'campaigns', name: '–ö–∞–º–ø–∞–Ω–∏–∏' },
    { table: 'jobs', name: 'Jobs' },
  ];

  for (const stat of stats) {
    try {
      const { count, error } = await supabase
        .from(stat.table)
        .select('*', { count: 'exact', head: true });

      if (!error) {
        console.log(`   ${stat.name}: ${count || 0}`);
      }
    } catch (err) {
      // Ignore errors
    }
  }
  console.log('');

  // –ò—Ç–æ–≥–∏
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  if (allGood) {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è Feature 003');
  } else {
    console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
    console.log('\n–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard ‚Üí SQL Editor');
    console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ backend/migrations/003_*.sql');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx tsx backend/scripts/setup-admin.ts');
  }
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
}

checkSchema().catch((error) => {
  console.error('\n‚ùå Fatal error:', error);
  process.exit(1);
});
