/**
 * –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const campaignId = process.argv[2];

if (!campaignId) {
  console.error('‚ùå Usage: npm run reset-campaign <campaign-id>');
  process.exit(1);
}

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function resetCampaign() {
  console.log(`üîÑ Resetting campaign ${campaignId}...`);

  // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
  const { data: campaign, error: fetchError } = await supabase
    .from('campaigns')
    .select('id, name, status, started_at')
    .eq('id', campaignId)
    .single();

  if (fetchError || !campaign) {
    console.error('‚ùå Campaign not found:', fetchError);
    process.exit(1);
  }

  console.log(`üìä Current status: ${campaign.status}`);
  console.log(`üìä Started at: ${campaign.started_at}`);

  // –°–±—Ä–æ—Å–∏–º —Å—Ç–∞—Ç—É—Å –Ω–∞ QUEUED
  const { data: updated, error: updateError } = await supabase
    .from('campaigns')
    .update({
      status: 'QUEUED',
      started_at: null,
      completed_at: null
    })
    .eq('id', campaignId)
    .select()
    .single();

  if (updateError) {
    console.error('‚ùå Failed to update campaign:', updateError);
    process.exit(1);
  }

  console.log(`‚úÖ Campaign reset to QUEUED`);
  console.log(`‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "Start" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ`);
}

resetCampaign().catch(console.error);
