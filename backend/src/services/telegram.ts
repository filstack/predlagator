// backend/src/services/telegram.ts
import { Api } from 'telegram/tl'
import { telegramClient } from '../lib/telegram-client'
import { rateLimitTracker } from './rate-limit-tracker'
import * as path from 'path'
import * as fs from 'fs/promises'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export interface SendMessageResult {
  success: boolean
  messageId?: number
  error?: string
  errorCode?: string
  waitTime?: number // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è FLOOD_WAIT)
}

/**
 * Telegram —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GramJS –∫–ª–∏–µ–Ω—Ç
 */
export class TelegramService {
  private uploadDir: string

  constructor() {
    this.uploadDir = path.join(__dirname, '..', '..', 'uploads')
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
   */
  async sendMessage(
    channelUsername: string,
    content: string,
    options?: {
      mediaType?: 'PHOTO' | 'VIDEO' | 'DOCUMENT' | null
      mediaUrl?: string | null
    }
  ): Promise<SendMessageResult> {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ @${channelUsername}`)
    console.log(`   –ö–æ–Ω—Ç–µ–Ω—Ç: ${content.substring(0, 50)}...`)
    if (options?.mediaType) {
      console.log(`   –ú–µ–¥–∏–∞: ${options.mediaType} - ${options.mediaUrl}`)
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const rateLimitKey = 'telegram:global' // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª—é—á–∏
      const blocked = await rateLimitTracker.isBlocked(rateLimitKey)

      if (blocked) {
        const remaining = await rateLimitTracker.getRemainingWaitTime(rateLimitKey)
        console.log(`‚è∏Ô∏è  Rate limit –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å ${remaining}—Å`)
        return {
          success: false,
          error: `Rate limit active, wait ${remaining} seconds`,
          errorCode: 'FLOOD_WAIT',
          waitTime: remaining,
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      const client = await telegramClient.getClient()

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º (—É–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å)
      const username = channelUsername.replace('@', '')

      // –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
      const entity = await client.getEntity(username)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let result: any

      if (options?.mediaType && options?.mediaUrl) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –º–µ–¥–∏–∞
        result = await this.sendMediaMessage(client, entity, content, options)
      } else {
        // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await client.sendMessage(entity, {
          message: content,
        })
      }

      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ @${username} (ID: ${result.id})`)

      return {
        success: true,
        messageId: result.id,
      }
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ @${channelUsername}:`, error)

      return this.handleError(error, channelUsername)
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
   */
  private async sendMediaMessage(
    client: any,
    entity: any,
    content: string,
    options: { mediaType: string; mediaUrl: string }
  ): Promise<any> {
    const { mediaType, mediaUrl } = options

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–º
    let file: any

    if (mediaUrl.startsWith('http://') || mediaUrl.startsWith('https://')) {
      // –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - GramJS –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
      file = mediaUrl
    } else {
      // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª - —á–∏—Ç–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
      const filePath = path.join(this.uploadDir, mediaUrl)
      file = await client.uploadFile({
        file: await fs.readFile(filePath),
        workers: 1,
      })
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    let media: any

    switch (mediaType) {
      case 'PHOTO':
        media = new Api.InputMediaUploadedPhoto({
          file,
        })
        break

      case 'VIDEO':
        media = new Api.InputMediaUploadedDocument({
          file,
          mimeType: 'video/mp4',
          attributes: [
            new Api.DocumentAttributeVideo({
              duration: 0,
              w: 0,
              h: 0,
            }),
          ],
        })
        break

      case 'DOCUMENT':
        media = new Api.InputMediaUploadedDocument({
          file,
          mimeType: 'application/octet-stream',
          attributes: [
            new Api.DocumentAttributeFilename({
              fileName: path.basename(mediaUrl),
            }),
          ],
        })
        break

      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: ${mediaType}`)
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
    return await client.sendMessage(entity, {
      message: content,
      file: media,
    })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API
   */
  private async handleError(error: any, channelUsername?: string): Promise<SendMessageResult> {
    const errorMessage = error.message || error.toString()

    // FLOOD_WAIT - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    if (errorMessage.includes('FLOOD_WAIT')) {
      const match = errorMessage.match(/FLOOD_WAIT_(\d+)/)
      const waitTime = match ? parseInt(match[1]) : 30

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ rate limit tracker
      const rateLimitKey = 'telegram:global'
      await rateLimitTracker.recordFloodWait(rateLimitKey, waitTime, errorMessage)

      return {
        success: false,
        error: `Rate limit exceeded, wait ${waitTime} seconds`,
        errorCode: 'FLOOD_WAIT',
        waitTime,
      }
    }

    // CHAT_WRITE_FORBIDDEN - –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å
    if (errorMessage.includes('CHAT_WRITE_FORBIDDEN')) {
      return {
        success: false,
        error: 'No permissions to write to this chat',
        errorCode: 'CHAT_WRITE_FORBIDDEN',
      }
    }

    // USER_BANNED_IN_CHANNEL - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
    if (errorMessage.includes('USER_BANNED_IN_CHANNEL')) {
      return {
        success: false,
        error: 'User is banned in this channel',
        errorCode: 'USER_BANNED_IN_CHANNEL',
      }
    }

    // CHANNEL_PRIVATE - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
    if (errorMessage.includes('CHANNEL_PRIVATE')) {
      return {
        success: false,
        error: 'Channel is private or does not exist',
        errorCode: 'CHANNEL_PRIVATE',
      }
    }

    // USERNAME_NOT_OCCUPIED - –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    if (errorMessage.includes('USERNAME_NOT_OCCUPIED')) {
      return {
        success: false,
        error: 'Channel username not found',
        errorCode: 'USERNAME_NOT_OCCUPIED',
      }
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    return {
      success: false,
      error: errorMessage,
      errorCode: 'UNKNOWN_ERROR',
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
   */
  async checkChannelAccess(channelUsername: string): Promise<boolean> {
    try {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ @${channelUsername}`)

      const client = await telegramClient.getClient()
      const username = channelUsername.replace('@', '')

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity –∫–∞–Ω–∞–ª–∞
      const entity = await client.getEntity(username)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
      if (entity.className === 'Channel' || entity.className === 'Chat') {
        console.log(`‚úÖ –ö–∞–Ω–∞–ª @${username} –¥–æ—Å—Ç—É–ø–µ–Ω`)
        return true
      }

      return false
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ @${channelUsername}:`, error.message)
      return false
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
   */
  async getChannelInfo(channelUsername: string): Promise<any> {
    try {
      const client = await telegramClient.getClient()
      const username = channelUsername.replace('@', '')

      const entity = await client.getEntity(username)

      return {
        id: entity.id?.toString(),
        title: entity.title,
        username: entity.username,
        participantsCount: entity.participantsCount,
        about: entity.about,
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ:`, error)
      return null
    }
  }
}

// –°–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegramService = new TelegramService()
