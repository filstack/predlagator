// backend/src/services/rate-limit-tracker.ts
import { redis } from '../lib/redis'
import prisma from '../lib/prisma'

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ rate limit –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
 */
export interface RateLimitInfo {
  blockedUntil: Date
  waitSeconds: number
  errorMessage: string
}

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limits
 */
export interface RateLimitStats {
  totalBlocks: number
  activeBlocks: number
  recentBlocks: Array<{
    key: string
    blockedUntil: Date
    waitSeconds: number
  }>
}

/**
 * –°–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è rate limits Telegram API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏ TTL
 */
export class RateLimitTracker {
  private readonly REDIS_PREFIX = 'rate_limit:'
  private readonly STATS_KEY = 'rate_limit:stats'

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ FLOOD_WAIT –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
   */
  async recordFloodWait(
    key: string,
    waitSeconds: number,
    errorMessage: string
  ): Promise<void> {
    const blockedUntil = new Date(Date.now() + waitSeconds * 1000)
    const redisKey = `${this.REDIS_PREFIX}${key}`

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º
    await redis.setex(
      redisKey,
      waitSeconds,
      JSON.stringify({
        blockedUntil: blockedUntil.toISOString(),
        waitSeconds,
        errorMessage,
      })
    )

    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    await redis.hincrby(this.STATS_KEY, 'total', 1)
    await redis.hincrby(this.STATS_KEY, 'active', 1)

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await this.logToDatabase(key, waitSeconds, errorMessage)

    console.log(
      `‚è±Ô∏è  Rate limit: ${key} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${waitSeconds}—Å –¥–æ ${blockedUntil.toISOString()}`
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–ª—é—á rate limit'–æ–º
   */
  async isBlocked(key: string): Promise<RateLimitInfo | null> {
    const redisKey = `${this.REDIS_PREFIX}${key}`
    const data = await redis.get(redisKey)

    if (!data) {
      return null
    }

    try {
      const info = JSON.parse(data)
      return {
        blockedUntil: new Date(info.blockedUntil),
        waitSeconds: info.waitSeconds,
        errorMessage: info.errorMessage,
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ rate limit –¥–∞–Ω–Ω—ã—Ö:', error)
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
   */
  async getRemainingWaitTime(key: string): Promise<number> {
    const info = await this.isBlocked(key)
    if (!info) {
      return 0
    }

    const remaining = Math.ceil((info.blockedUntil.getTime() - Date.now()) / 1000)
    return Math.max(0, remaining)
  }

  /**
   * –°–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
   */
  async clearBlock(key: string): Promise<void> {
    const redisKey = `${this.REDIS_PREFIX}${key}`
    const existed = await redis.del(redisKey)

    if (existed) {
      await redis.hincrby(this.STATS_KEY, 'active', -1)
      console.log(`‚úÖ Rate limit —Å–Ω—è—Ç: ${key}`)
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limits
   */
  async getStats(): Promise<RateLimitStats> {
    const stats = await redis.hgetall(this.STATS_KEY)

    const totalBlocks = parseInt(stats.total || '0')
    const activeBlocks = parseInt(stats.active || '0')

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    const keys = await redis.keys(`${this.REDIS_PREFIX}*`)
    const recentBlocks: Array<{
      key: string
      blockedUntil: Date
      waitSeconds: number
    }> = []

    for (const redisKey of keys) {
      const data = await redis.get(redisKey)
      if (data) {
        try {
          const info = JSON.parse(data)
          recentBlocks.push({
            key: redisKey.replace(this.REDIS_PREFIX, ''),
            blockedUntil: new Date(info.blockedUntil),
            waitSeconds: info.waitSeconds,
          })
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    recentBlocks.sort((a, b) => b.blockedUntil.getTime() - a.blockedUntil.getTime())

    return {
      totalBlocks,
      activeBlocks,
      recentBlocks: recentBlocks.slice(0, 50), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
    }
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async resetStats(): Promise<void> {
    await redis.del(this.STATS_KEY)
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limits —Å–±—Ä–æ—à–µ–Ω–∞')
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  private async logToDatabase(
    key: string,
    waitSeconds: number,
    errorMessage: string
  ): Promise<void> {
    try {
      await prisma.auditLog.create({
        data: {
          userId: null,
          action: 'RATE_LIMIT_HIT',
          resourceType: 'RateLimit',
          resourceId: key,
          metadata: {
            waitSeconds,
            errorMessage,
            timestamp: new Date().toISOString(),
          },
          severity: 'WARNING',
        },
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è rate limit –≤ –ë–î:', error)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
   * (Redis –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ TTL, –Ω–æ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
   */
  async cleanupExpired(): Promise<number> {
    const keys = await redis.keys(`${this.REDIS_PREFIX}*`)
    let cleaned = 0

    for (const key of keys) {
      const ttl = await redis.ttl(key)
      if (ttl === -1) {
        // –ù–µ—Ç TTL - —É–¥–∞–ª—è–µ–º
        await redis.del(key)
        cleaned++
      }
    }

    if (cleaned > 0) {
      await redis.hincrby(this.STATS_KEY, 'active', -cleaned)
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: ${cleaned}`)
    }

    return cleaned
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  async getActiveBlocks(): Promise<
    Array<{
      key: string
      info: RateLimitInfo
      remainingSeconds: number
    }>
  > {
    const keys = await redis.keys(`${this.REDIS_PREFIX}*`)
    const blocks: Array<{
      key: string
      info: RateLimitInfo
      remainingSeconds: number
    }> = []

    for (const redisKey of keys) {
      const key = redisKey.replace(this.REDIS_PREFIX, '')
      const info = await this.isBlocked(key)
      const remaining = await this.getRemainingWaitTime(key)

      if (info && remaining > 0) {
        blocks.push({
          key,
          info,
          remainingSeconds: remaining,
        })
      }
    }

    return blocks
  }
}

// –°–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
export const rateLimitTracker = new RateLimitTracker()

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
if (process.env.NODE_ENV !== 'test') {
  setInterval(
    () => {
      rateLimitTracker.cleanupExpired().catch((error) => {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ rate limits:', error)
      })
    },
    5 * 60 * 1000
  )
}
