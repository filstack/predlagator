// backend/src/api/test.ts
import { Router } from 'express'
import { getSupabase } from '../lib/supabase'
import { telegramClient } from '../lib/telegram-client'

const router = Router()

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª
 * –ú–∏–Ω—É–µ—Ç –æ—á–µ—Ä–µ–¥–∏ BullMQ/Redis –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
router.post('/send-message', async (req, res) => {
  try {
    const { channelId, message, mediaType, mediaUrl } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!channelId || !message) {
      return res.status(400).json({
        error: 'channelId –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ë–î
    const supabase = getSupabase()
    const { data: channel, error: channelError } = await supabase
      .from('channels')
      .select('*')
      .eq('id', channelId)
      .single()

    if (channelError || !channel) {
      return res.status(404).json({
        error: '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
      })
    }

    console.log(`üì§ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª: ${channel.username}`)

    // –ü–æ–ª—É—á–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    const client = await telegramClient.getClient()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
    let result
    if (mediaType && mediaUrl) {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –º–µ–¥–∏–∞
      const mediaMap = {
        PHOTO: 'sendPhoto',
        VIDEO: 'sendVideo',
        DOCUMENT: 'sendDocument',
      } as const

      const method = mediaMap[mediaType as keyof typeof mediaMap]
      if (method) {
        result = await (client as any)[method](channel.username, mediaUrl, {
          caption: message,
        })
      } else {
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: ${mediaType}`)
      }
    } else {
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      result = await client.sendMessage(channel.username, {
        message,
      })
    }

    console.log(`‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤ ${channel.username}`)

    return res.json({
      success: true,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
      channelUsername: channel.username,
      timestamp: new Date().toISOString(),
      result: {
        id: result.id,
        date: result.date,
      },
    })
  } catch (error: any) {
    console.error('‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)

    return res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
      details: error.message,
      type: error.constructor.name,
    })
  }
})

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
 */
router.get('/telegram-status', async (req, res) => {
  try {
    const client = await telegramClient.getClient()
    const me = await client.getMe()

    return res.json({
      connected: true,
      user: {
        id: me.id,
        username: me.username,
        phone: me.phone,
        firstName: me.firstName,
      },
    })
  } catch (error: any) {
    console.error('‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —Å—Ç–∞—Ç—É—Å–∞:', error)

    return res.status(500).json({
      connected: false,
      error: error.message,
    })
  }
})

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
router.get('/channels', async (req, res) => {
  try {
    const supabase = getSupabase()
    const { data: channels, error } = await supabase
      .from('channels')
      .select('id, username, title, is_active')
      .order('created_at', { ascending: false })

    if (error) throw error

    return res.json({
      channels,
      count: channels?.length || 0,
    })
  } catch (error: any) {
    console.error('‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:', error)

    return res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤',
      details: error.message,
    })
  }
})

export default router
