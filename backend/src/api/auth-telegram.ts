// backend/src/api/auth-telegram.ts
import { Router } from 'express'
import { TelegramClient } from 'telegram'
import { StringSession } from 'telegram/sessions'

const router = Router()

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
interface AuthSession {
  client: TelegramClient
  phoneCodeHash: string
  apiId: number
  apiHash: string
  phone: string
}

const authSessions = new Map<string, AuthSession>()

/**
 * –®–∞–≥ 1: –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS –∫–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
router.post('/start', async (req, res) => {
  try {
    const { apiId, apiHash, phone } = req.body

    if (!apiId || !apiHash || !phone) {
      return res.status(400).json({
        error: 'apiId, apiHash –∏ phone –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
      })
    }

    console.log('üîê –ù–∞—á–∞–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram –¥–ª—è:', phone)

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø—É—Å—Ç—É—é —Å–µ—Å—Å–∏—é
    const session = new StringSession('')
    const client = new TelegramClient(session, parseInt(apiId), apiHash, {
      connectionRetries: 5,
    })

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    await client.connect()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
    const result = await client.sendCode(
      {
        apiId: parseInt(apiId),
        apiHash: apiHash,
      },
      phone
    )

    // –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
    const sessionId = `${Date.now()}_${Math.random().toString(36).substring(7)}`

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    authSessions.set(sessionId, {
      client,
      phoneCodeHash: result.phoneCodeHash,
      apiId: parseInt(apiId),
      apiHash,
      phone,
    })

    console.log('‚úì SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞', phone)

    return res.json({
      success: true,
      sessionId,
      message: 'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω',
      phoneCodeHash: result.phoneCodeHash,
    })
  } catch (error: any) {
    console.error('‚úó –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)

    return res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é',
      details: error.message,
    })
  }
})

/**
 * –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å SMS –∫–æ–¥
 * –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å:
 * - success: true - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
 * - needPassword: true - —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å
 */
router.post('/verify-code', async (req, res) => {
  try {
    const { sessionId, code } = req.body

    if (!sessionId || !code) {
      return res.status(400).json({
        error: 'sessionId –∏ code –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
      })
    }

    const authSession = authSessions.get(sessionId)
    if (!authSession) {
      return res.status(404).json({
        error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞',
      })
    }

    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞ –¥–ª—è:', authSession.phone)

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
      await authSession.client.invoke(
        new (require('telegram/tl').Api.auth.SignIn)({
          phoneNumber: authSession.phone,
          phoneCodeHash: authSession.phoneCodeHash,
          phoneCode: code,
        })
      )

      // –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      const sessionString = authSession.client.session.save() as unknown as string

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const me = await authSession.client.getMe()

      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      await authSession.client.disconnect()
      authSessions.delete(sessionId)

      console.log('‚úì –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', authSession.phone)

      return res.json({
        success: true,
        sessionString,
        user: {
          id: me.id.toString(),
          username: me.username,
          phone: me.phone,
          firstName: me.firstName,
        },
      })
    } catch (error: any) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ 2FA –ø–∞—Ä–æ–ª—å
      if (error.message.includes('SESSION_PASSWORD_NEEDED')) {
        console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å –¥–ª—è:', authSession.phone)

        return res.json({
          success: false,
          needPassword: true,
          message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        })
      }

      throw error
    }
  } catch (error: any) {
    console.error('‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error)

    return res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥',
      details: error.message,
    })
  }
})

/**
 * –®–∞–≥ 3: –í–≤–µ—Å—Ç–∏ 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
 */
router.post('/verify-password', async (req, res) => {
  try {
    const { sessionId, password } = req.body

    if (!sessionId || !password) {
      return res.status(400).json({
        error: 'sessionId –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
      })
    }

    const authSession = authSessions.get(sessionId)
    if (!authSession) {
      return res.status(404).json({
        error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞',
      })
    }

    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –ø–∞—Ä–æ–ª—è –¥–ª—è:', authSession.phone)

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è
    const passwordSrpResult = await authSession.client.invoke(
      new (require('telegram/tl').Api.account.GetPassword)()
    )

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è SRP —á–µ–∫–∞
    const { computeCheck } = require('telegram/Password')

    // –í—ã—á–∏—Å–ª—è–µ–º SRP —á–µ–∫
    const passwordSrpCheck = await computeCheck(passwordSrpResult, password)

    // –í—Ö–æ–¥–∏–º —Å –ø–∞—Ä–æ–ª–µ–º
    await authSession.client.invoke(
      new (require('telegram/tl').Api.auth.CheckPassword)({
        password: passwordSrpCheck,
      })
    )

    // –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const sessionString = authSession.client.session.save() as unknown as string

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const me = await authSession.client.getMe()

    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    await authSession.client.disconnect()
    authSessions.delete(sessionId)

    console.log('‚úì 2FA –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', authSession.phone)

    return res.json({
      success: true,
      sessionString,
      user: {
        id: me.id.toString(),
        username: me.username,
        phone: me.phone,
        firstName: me.firstName,
      },
    })
  } catch (error: any) {
    console.error('‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', error)

    return res.status(500).json({
      error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      details: error.message,
    })
  }
})

/**
 * –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
router.post('/cancel', async (req, res) => {
  try {
    const { sessionId } = req.body

    if (!sessionId) {
      return res.status(400).json({
        error: 'sessionId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
      })
    }

    const authSession = authSessions.get(sessionId)
    if (authSession) {
      await authSession.client.disconnect()
      authSessions.delete(sessionId)
      console.log('‚úó –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è:', authSession.phone)
    }

    return res.json({
      success: true,
      message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',
    })
  } catch (error: any) {
    console.error('‚úó –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã:', error)

    return res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã',
      details: error.message,
    })
  }
})

/**
 * –û–±–Ω–æ–≤–∏—Ç—å session string –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 */
router.post('/update-session', async (req, res) => {
  try {
    const { sessionString } = req.body

    if (!sessionString) {
      return res.status(400).json({
        error: 'sessionString –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
      })
    }

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ session string –Ω–∞ –±—ç–∫–µ–Ω–¥–µ...')

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º telegramClient
    const { telegramClient } = require('../lib/telegram-client')

    // –û–±–Ω–æ–≤–ª—è–µ–º session
    await telegramClient.updateSession(sessionString)

    console.log('‚úì Session string —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω')

    return res.json({
      success: true,
      message: 'Session string –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ',
    })
  } catch (error: any) {
    console.error('‚úó –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è session:', error)

    return res.status(500).json({
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å session',
      details: error.message,
    })
  }
})

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
setInterval(() => {
  const now = Date.now()
  for (const [sessionId, authSession] of authSessions.entries()) {
    const sessionAge = now - parseInt(sessionId.split('_')[0])
    // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç
    if (sessionAge > 10 * 60 * 1000) {
      authSession.client.disconnect().catch(() => {})
      authSessions.delete(sessionId)
      console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–µ—Å—Å–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    }
  }
}, 10 * 60 * 1000)

export default router
