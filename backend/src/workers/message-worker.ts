// backend/src/workers/message-worker.ts
import { Worker, Job } from 'bullmq'
import { redisConnection } from '../lib/redis'
import prisma from '../lib/prisma'
import { SendMessageJobData } from '../queues/campaign-queue'
import { telegramService } from '../services/telegram'

/**
 * –í–æ—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –∫–∞–Ω–∞–ª—ã
 */
export function createMessageWorker() {
  const worker = new Worker<SendMessageJobData>(
    'message-sending',
    async (job: Job<SendMessageJobData>) => {
      const { jobId, campaignId, channelId, channelUsername, templateContent, mediaType, mediaUrl } =
        job.data

      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∂–æ–±–∞ ${jobId}: @${channelUsername}`)

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∂–æ–±–∞ –≤ –ë–î
        await prisma.job.update({
          where: { id: jobId },
          data: {
            status: 'SENDING',
            startedAt: new Date(),
            attempts: {
              increment: 1,
            },
          },
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
        const result = await telegramService.sendMessage(channelUsername, templateContent, {
          mediaType,
          mediaUrl,
        })

        if (result.success) {
          // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
          await prisma.job.update({
            where: { id: jobId },
            data: {
              status: 'SENT',
              sentAt: new Date(),
            },
          })

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–º–ø–∞–Ω–∏–∏
          await updateCampaignProgress(campaignId)

          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ @${channelUsername}`)

          return {
            success: true,
            channel: channelUsername,
            messageId: result.messageId,
          }
        } else {
          // –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FLOOD_WAIT –æ—Ç–¥–µ–ª—å–Ω–æ
          if (result.errorCode === 'FLOOD_WAIT' && result.waitTime) {
            console.log(
              `‚è≥ FLOOD_WAIT –¥–ª—è @${channelUsername}: –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${result.waitTime}—Å`
            )

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∂–æ–± —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º QUEUED –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
            await prisma.job.update({
              where: { id: jobId },
              data: {
                status: 'QUEUED',
                errorMessage: result.error,
              },
            })

            // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è BullMQ
            const error = new Error(result.error || 'FLOOD_WAIT')
            ;(error as any).delay = result.waitTime * 1000 // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å
            throw error
          }

          // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
          throw new Error(result.error || 'Unknown error')
        }
      } catch (error: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ @${channelUsername}:`, error.message)

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ retry
        const currentJob = await prisma.job.findUnique({
          where: { id: jobId },
          select: { attempts: true },
        })

        const campaign = await prisma.campaign.findUnique({
          where: { id: campaignId },
          select: { retryLimit: true },
        })

        const shouldRetry = currentJob && campaign && currentJob.attempts < campaign.retryLimit

        // –î–ª—è FLOOD_WAIT –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º errorCount –∫–∞–Ω–∞–ª–∞ (—ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ –∫–∞–Ω–∞–ª–∞)
        const isFloodWait = error.message.includes('FLOOD_WAIT') || error.message.includes('Rate limit')

        if (!isFloodWait) {
          // –û–±–Ω–æ–≤–ª—è–µ–º errorCount –∫–∞–Ω–∞–ª–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
          await prisma.channel.update({
            where: { id: channelId },
            data: {
              errorCount: {
                increment: 1,
              },
              lastError: error.message,
            },
          })

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª
          const channel = await prisma.channel.findUnique({
            where: { id: channelId },
            select: { errorCount: true },
          })

          if (channel && channel.errorCount >= 5) {
            await prisma.channel.update({
              where: { id: channelId },
              data: {
                isActive: false,
              },
            })
            console.warn(`‚ö†Ô∏è –ö–∞–Ω–∞–ª @${channelUsername} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ 5 –æ—à–∏–±–æ–∫`)
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∂–æ–±–∞
        await prisma.job.update({
          where: { id: jobId },
          data: {
            status: shouldRetry ? 'QUEUED' : 'FAILED',
            errorMessage: error.message,
            failedAt: shouldRetry ? null : new Date(),
          },
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–º–ø–∞–Ω–∏–∏
        await updateCampaignProgress(campaignId)

        throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è BullMQ
      }
    },
    {
      connection: redisConnection,
      concurrency: 10, // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
      limiter: {
        max: 20, // –ú–∞–∫—Å–∏–º—É–º 20 –¥–∂–æ–±–æ–≤
        duration: 60000, // –∑–∞ 60 —Å–µ–∫—É–Ω–¥ (rate limiting)
      },
    }
  )

  // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
  worker.on('completed', (job) => {
    console.log(`‚úÖ –í–æ—Ä–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª –¥–∂–æ–± ${job.id}`)
  })

  worker.on('failed', (job, err) => {
    console.error(`‚ùå –í–æ—Ä–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–∞–ª–∏–ª –¥–∂–æ–± ${job?.id}:`, err.message)
  })

  worker.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', err)
  })

  worker.on('stalled', (jobId) => {
    console.warn(`‚ö†Ô∏è –î–∂–æ–± ${jobId} –∑–∞—Å—Ç—Ä—è–ª (stalled)`)
  })

  return worker
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–º–ø–∞–Ω–∏–∏
 */
async function updateCampaignProgress(campaignId: string) {
  const stats = await prisma.job.groupBy({
    by: ['status'],
    where: { campaignId },
    _count: { status: true },
  })

  const totalJobs = stats.reduce((sum, stat) => sum + stat._count.status, 0)
  const completedJobs = stats.find((s) => s.status === 'SENT')?._count.status || 0
  const failedJobs = stats.find((s) => s.status === 'FAILED')?._count.status || 0

  const progress = Math.floor(((completedJobs + failedJobs) / totalJobs) * 100)

  await prisma.campaign.update({
    where: { id: campaignId },
    data: {
      progress,
      // –ï—Å–ª–∏ –≤—Å–µ –¥–∂–æ–±—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏
      ...(progress === 100 && {
        status: 'COMPLETED',
        completedAt: new Date(),
      }),
    },
  })
}
