// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
import dotenv from 'dotenv';
import { getSupabase } from '../lib/supabase';

dotenv.config();

async function checkChannels() {
  try {
    const supabase = getSupabase();

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
    const { count: totalCount, error: countError } = await supabase
      .from('channels')
      .select('*', { count: 'exact', head: true });

    if (countError) throw countError;

    console.log(`üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ: ${totalCount}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    const { data: channels, error } = await supabase
      .from('channels')
      .select('id, username, category, telegram_links, created_at')
      .order('created_at', { ascending: false })
      .limit(5);

    if (error) throw error;

    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:');
    channels?.forEach((channel, index) => {
      console.log(`\n${index + 1}. @${channel.username}`);
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${channel.category}`);
      console.log(`   Telegram —Å—Å—ã–ª–∫–∏: ${channel.telegram_links?.length || 0}`);
      if (channel.telegram_links && channel.telegram_links.length > 0) {
        console.log(`   –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞: ${channel.telegram_links[0]}`);
      }
      console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(channel.created_at).toLocaleString('ru-RU')}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

checkChannels();
